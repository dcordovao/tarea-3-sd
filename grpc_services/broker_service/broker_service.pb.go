// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: broker_service.proto

package broker_service

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Body string `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_broker_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_broker_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_broker_service_proto_rawDescGZIP(), []int{0}
}

func (x *Message) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

// La IP es por si se necesita saber el numero del dns
type DnsAddress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip    string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	IdDns int64  `protobuf:"varint,2,opt,name=idDns,proto3" json:"idDns,omitempty"`
}

func (x *DnsAddress) Reset() {
	*x = DnsAddress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_broker_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DnsAddress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DnsAddress) ProtoMessage() {}

func (x *DnsAddress) ProtoReflect() protoreflect.Message {
	mi := &file_broker_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DnsAddress.ProtoReflect.Descriptor instead.
func (*DnsAddress) Descriptor() ([]byte, []int) {
	return file_broker_service_proto_rawDescGZIP(), []int{1}
}

func (x *DnsAddress) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *DnsAddress) GetIdDns() int64 {
	if x != nil {
		return x.IdDns
	}
	return 0
}

type ClockMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X int64 `protobuf:"varint,1,opt,name=x,proto3" json:"x,omitempty"`
	Y int64 `protobuf:"varint,2,opt,name=y,proto3" json:"y,omitempty"`
	Z int64 `protobuf:"varint,3,opt,name=z,proto3" json:"z,omitempty"`
}

func (x *ClockMessage) Reset() {
	*x = ClockMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_broker_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClockMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClockMessage) ProtoMessage() {}

func (x *ClockMessage) ProtoReflect() protoreflect.Message {
	mi := &file_broker_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClockMessage.ProtoReflect.Descriptor instead.
func (*ClockMessage) Descriptor() ([]byte, []int) {
	return file_broker_service_proto_rawDescGZIP(), []int{2}
}

func (x *ClockMessage) GetX() int64 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *ClockMessage) GetY() int64 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *ClockMessage) GetZ() int64 {
	if x != nil {
		return x.Z
	}
	return 0
}

type CommandResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Body  string        `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
	Clock *ClockMessage `protobuf:"bytes,2,opt,name=clock,proto3" json:"clock,omitempty"`
	Iddns int64         `protobuf:"varint,3,opt,name=iddns,proto3" json:"iddns,omitempty"`
	Ipdns string        `protobuf:"bytes,4,opt,name=ipdns,proto3" json:"ipdns,omitempty"`
}

func (x *CommandResponse) Reset() {
	*x = CommandResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_broker_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandResponse) ProtoMessage() {}

func (x *CommandResponse) ProtoReflect() protoreflect.Message {
	mi := &file_broker_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandResponse.ProtoReflect.Descriptor instead.
func (*CommandResponse) Descriptor() ([]byte, []int) {
	return file_broker_service_proto_rawDescGZIP(), []int{3}
}

func (x *CommandResponse) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

func (x *CommandResponse) GetClock() *ClockMessage {
	if x != nil {
		return x.Clock
	}
	return nil
}

func (x *CommandResponse) GetIddns() int64 {
	if x != nil {
		return x.Iddns
	}
	return 0
}

func (x *CommandResponse) GetIpdns() string {
	if x != nil {
		return x.Ipdns
	}
	return ""
}

var File_broker_service_proto protoreflect.FileDescriptor

var file_broker_service_proto_rawDesc = []byte{
	0x0a, 0x14, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0x1d, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x32, 0x0a, 0x0a, 0x44, 0x6e, 0x73, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x64, 0x44, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x69, 0x64, 0x44, 0x6e, 0x73, 0x22, 0x38, 0x0a, 0x0c, 0x43, 0x6c, 0x6f,
	0x63, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x01, 0x79, 0x12, 0x0c, 0x0a, 0x01, 0x7a, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x01, 0x7a, 0x22, 0x85, 0x01, 0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x63,
	0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x62, 0x72, 0x6f,
	0x6b, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6c, 0x6f, 0x63,
	0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x64, 0x64, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x69, 0x64, 0x64, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x70, 0x64, 0x6e, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x70, 0x64, 0x6e, 0x73, 0x32, 0xa3, 0x02, 0x0a, 0x0d,
	0x42, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x44, 0x0a,
	0x0b, 0x45, 0x6e, 0x76, 0x69, 0x61, 0x72, 0x56, 0x65, 0x72, 0x62, 0x6f, 0x12, 0x17, 0x2e, 0x62,
	0x72, 0x6f, 0x6b, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x1a, 0x2e, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x44, 0x6e, 0x73, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x08, 0x53, 0x61, 0x79, 0x48, 0x65, 0x6c, 0x6c, 0x6f, 0x12,
	0x17, 0x2e, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x17, 0x2e, 0x62, 0x72, 0x6f, 0x6b, 0x65,
	0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x17,
	0x2e, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x1f, 0x2e, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72,
	0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x45, 0x0a, 0x0f, 0x50, 0x72,
	0x6f, 0x70, 0x61, 0x67, 0x61, 0x72, 0x43, 0x61, 0x6d, 0x62, 0x69, 0x6f, 0x73, 0x12, 0x17, 0x2e,
	0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x17, 0x2e, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_broker_service_proto_rawDescOnce sync.Once
	file_broker_service_proto_rawDescData = file_broker_service_proto_rawDesc
)

func file_broker_service_proto_rawDescGZIP() []byte {
	file_broker_service_proto_rawDescOnce.Do(func() {
		file_broker_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_broker_service_proto_rawDescData)
	})
	return file_broker_service_proto_rawDescData
}

var file_broker_service_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_broker_service_proto_goTypes = []interface{}{
	(*Message)(nil),         // 0: broker_service.Message
	(*DnsAddress)(nil),      // 1: broker_service.DnsAddress
	(*ClockMessage)(nil),    // 2: broker_service.ClockMessage
	(*CommandResponse)(nil), // 3: broker_service.CommandResponse
}
var file_broker_service_proto_depIdxs = []int32{
	2, // 0: broker_service.CommandResponse.clock:type_name -> broker_service.ClockMessage
	0, // 1: broker_service.BrokerService.EnviarVerbo:input_type -> broker_service.Message
	0, // 2: broker_service.BrokerService.SayHello:input_type -> broker_service.Message
	0, // 3: broker_service.BrokerService.Connect:input_type -> broker_service.Message
	0, // 4: broker_service.BrokerService.PropagarCambios:input_type -> broker_service.Message
	1, // 5: broker_service.BrokerService.EnviarVerbo:output_type -> broker_service.DnsAddress
	0, // 6: broker_service.BrokerService.SayHello:output_type -> broker_service.Message
	3, // 7: broker_service.BrokerService.Connect:output_type -> broker_service.CommandResponse
	0, // 8: broker_service.BrokerService.PropagarCambios:output_type -> broker_service.Message
	5, // [5:9] is the sub-list for method output_type
	1, // [1:5] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_broker_service_proto_init() }
func file_broker_service_proto_init() {
	if File_broker_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_broker_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_broker_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DnsAddress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_broker_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClockMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_broker_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_broker_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_broker_service_proto_goTypes,
		DependencyIndexes: file_broker_service_proto_depIdxs,
		MessageInfos:      file_broker_service_proto_msgTypes,
	}.Build()
	File_broker_service_proto = out.File
	file_broker_service_proto_rawDesc = nil
	file_broker_service_proto_goTypes = nil
	file_broker_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// BrokerServiceClient is the client API for BrokerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BrokerServiceClient interface {
	EnviarVerbo(ctx context.Context, in *Message, opts ...grpc.CallOption) (*DnsAddress, error)
	SayHello(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
	Connect(ctx context.Context, in *Message, opts ...grpc.CallOption) (*CommandResponse, error)
	PropagarCambios(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
}

type brokerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBrokerServiceClient(cc grpc.ClientConnInterface) BrokerServiceClient {
	return &brokerServiceClient{cc}
}

func (c *brokerServiceClient) EnviarVerbo(ctx context.Context, in *Message, opts ...grpc.CallOption) (*DnsAddress, error) {
	out := new(DnsAddress)
	err := c.cc.Invoke(ctx, "/broker_service.BrokerService/EnviarVerbo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerServiceClient) SayHello(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/broker_service.BrokerService/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerServiceClient) Connect(ctx context.Context, in *Message, opts ...grpc.CallOption) (*CommandResponse, error) {
	out := new(CommandResponse)
	err := c.cc.Invoke(ctx, "/broker_service.BrokerService/Connect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *brokerServiceClient) PropagarCambios(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/broker_service.BrokerService/PropagarCambios", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BrokerServiceServer is the server API for BrokerService service.
type BrokerServiceServer interface {
	EnviarVerbo(context.Context, *Message) (*DnsAddress, error)
	SayHello(context.Context, *Message) (*Message, error)
	Connect(context.Context, *Message) (*CommandResponse, error)
	PropagarCambios(context.Context, *Message) (*Message, error)
}

// UnimplementedBrokerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedBrokerServiceServer struct {
}

func (*UnimplementedBrokerServiceServer) EnviarVerbo(context.Context, *Message) (*DnsAddress, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EnviarVerbo not implemented")
}
func (*UnimplementedBrokerServiceServer) SayHello(context.Context, *Message) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (*UnimplementedBrokerServiceServer) Connect(context.Context, *Message) (*CommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (*UnimplementedBrokerServiceServer) PropagarCambios(context.Context, *Message) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PropagarCambios not implemented")
}

func RegisterBrokerServiceServer(s *grpc.Server, srv BrokerServiceServer) {
	s.RegisterService(&_BrokerService_serviceDesc, srv)
}

func _BrokerService_EnviarVerbo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServiceServer).EnviarVerbo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/broker_service.BrokerService/EnviarVerbo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServiceServer).EnviarVerbo(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrokerService_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServiceServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/broker_service.BrokerService/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServiceServer).SayHello(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrokerService_Connect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServiceServer).Connect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/broker_service.BrokerService/Connect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServiceServer).Connect(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _BrokerService_PropagarCambios_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BrokerServiceServer).PropagarCambios(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/broker_service.BrokerService/PropagarCambios",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BrokerServiceServer).PropagarCambios(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

var _BrokerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "broker_service.BrokerService",
	HandlerType: (*BrokerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "EnviarVerbo",
			Handler:    _BrokerService_EnviarVerbo_Handler,
		},
		{
			MethodName: "SayHello",
			Handler:    _BrokerService_SayHello_Handler,
		},
		{
			MethodName: "Connect",
			Handler:    _BrokerService_Connect_Handler,
		},
		{
			MethodName: "PropagarCambios",
			Handler:    _BrokerService_PropagarCambios_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "broker_service.proto",
}
