// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: dns_service.proto

package dns_service

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Body string `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *Message) Reset() {
	*x = Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dns_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Message) ProtoMessage() {}

func (x *Message) ProtoReflect() protoreflect.Message {
	mi := &file_dns_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Message.ProtoReflect.Descriptor instead.
func (*Message) Descriptor() ([]byte, []int) {
	return file_dns_service_proto_rawDescGZIP(), []int{0}
}

func (x *Message) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

type NewName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Domain string `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
	Ip     string `protobuf:"bytes,3,opt,name=ip,proto3" json:"ip,omitempty"`
	IdDns  int64  `protobuf:"varint,4,opt,name=idDns,proto3" json:"idDns,omitempty"`
}

func (x *NewName) Reset() {
	*x = NewName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dns_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewName) ProtoMessage() {}

func (x *NewName) ProtoReflect() protoreflect.Message {
	mi := &file_dns_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewName.ProtoReflect.Descriptor instead.
func (*NewName) Descriptor() ([]byte, []int) {
	return file_dns_service_proto_rawDescGZIP(), []int{1}
}

func (x *NewName) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NewName) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *NewName) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *NewName) GetIdDns() int64 {
	if x != nil {
		return x.IdDns
	}
	return 0
}

type UpdateInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Domain string `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
	Opt    string `protobuf:"bytes,3,opt,name=opt,proto3" json:"opt,omitempty"`
	Value  string `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	IdDns  int64  `protobuf:"varint,5,opt,name=idDns,proto3" json:"idDns,omitempty"`
}

func (x *UpdateInfo) Reset() {
	*x = UpdateInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dns_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInfo) ProtoMessage() {}

func (x *UpdateInfo) ProtoReflect() protoreflect.Message {
	mi := &file_dns_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInfo.ProtoReflect.Descriptor instead.
func (*UpdateInfo) Descriptor() ([]byte, []int) {
	return file_dns_service_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UpdateInfo) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *UpdateInfo) GetOpt() string {
	if x != nil {
		return x.Opt
	}
	return ""
}

func (x *UpdateInfo) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *UpdateInfo) GetIdDns() int64 {
	if x != nil {
		return x.IdDns
	}
	return 0
}

type DeleteInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Domain string `protobuf:"bytes,2,opt,name=domain,proto3" json:"domain,omitempty"`
	IdDns  int64  `protobuf:"varint,3,opt,name=idDns,proto3" json:"idDns,omitempty"`
}

func (x *DeleteInfo) Reset() {
	*x = DeleteInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dns_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteInfo) ProtoMessage() {}

func (x *DeleteInfo) ProtoReflect() protoreflect.Message {
	mi := &file_dns_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteInfo.ProtoReflect.Descriptor instead.
func (*DeleteInfo) Descriptor() ([]byte, []int) {
	return file_dns_service_proto_rawDescGZIP(), []int{3}
}

func (x *DeleteInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DeleteInfo) GetDomain() string {
	if x != nil {
		return x.Domain
	}
	return ""
}

func (x *DeleteInfo) GetIdDns() int64 {
	if x != nil {
		return x.IdDns
	}
	return 0
}

type ClockMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X int64 `protobuf:"varint,1,opt,name=x,proto3" json:"x,omitempty"`
	Y int64 `protobuf:"varint,2,opt,name=y,proto3" json:"y,omitempty"`
	Z int64 `protobuf:"varint,3,opt,name=z,proto3" json:"z,omitempty"`
}

func (x *ClockMessage) Reset() {
	*x = ClockMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dns_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClockMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClockMessage) ProtoMessage() {}

func (x *ClockMessage) ProtoReflect() protoreflect.Message {
	mi := &file_dns_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClockMessage.ProtoReflect.Descriptor instead.
func (*ClockMessage) Descriptor() ([]byte, []int) {
	return file_dns_service_proto_rawDescGZIP(), []int{4}
}

func (x *ClockMessage) GetX() int64 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *ClockMessage) GetY() int64 {
	if x != nil {
		return x.Y
	}
	return 0
}

func (x *ClockMessage) GetZ() int64 {
	if x != nil {
		return x.Z
	}
	return 0
}

type CommandResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Body  string        `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
	Clock *ClockMessage `protobuf:"bytes,2,opt,name=clock,proto3" json:"clock,omitempty"`
}

func (x *CommandResponse) Reset() {
	*x = CommandResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dns_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandResponse) ProtoMessage() {}

func (x *CommandResponse) ProtoReflect() protoreflect.Message {
	mi := &file_dns_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandResponse.ProtoReflect.Descriptor instead.
func (*CommandResponse) Descriptor() ([]byte, []int) {
	return file_dns_service_proto_rawDescGZIP(), []int{5}
}

func (x *CommandResponse) GetBody() string {
	if x != nil {
		return x.Body
	}
	return ""
}

func (x *CommandResponse) GetClock() *ClockMessage {
	if x != nil {
		return x.Clock
	}
	return nil
}

type IdDns struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdDns int64  `protobuf:"varint,1,opt,name=idDns,proto3" json:"idDns,omitempty"`
	IpDns string `protobuf:"bytes,2,opt,name=ipDns,proto3" json:"ipDns,omitempty"`
}

func (x *IdDns) Reset() {
	*x = IdDns{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dns_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdDns) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdDns) ProtoMessage() {}

func (x *IdDns) ProtoReflect() protoreflect.Message {
	mi := &file_dns_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdDns.ProtoReflect.Descriptor instead.
func (*IdDns) Descriptor() ([]byte, []int) {
	return file_dns_service_proto_rawDescGZIP(), []int{6}
}

func (x *IdDns) GetIdDns() int64 {
	if x != nil {
		return x.IdDns
	}
	return 0
}

func (x *IdDns) GetIpDns() string {
	if x != nil {
		return x.IpDns
	}
	return ""
}

type ZfFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nombre    string `protobuf:"bytes,1,opt,name=nombre,proto3" json:"nombre,omitempty"`
	Contenido string `protobuf:"bytes,2,opt,name=contenido,proto3" json:"contenido,omitempty"`
	IdDns     int64  `protobuf:"varint,3,opt,name=idDns,proto3" json:"idDns,omitempty"`
}

func (x *ZfFile) Reset() {
	*x = ZfFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dns_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ZfFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ZfFile) ProtoMessage() {}

func (x *ZfFile) ProtoReflect() protoreflect.Message {
	mi := &file_dns_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ZfFile.ProtoReflect.Descriptor instead.
func (*ZfFile) Descriptor() ([]byte, []int) {
	return file_dns_service_proto_rawDescGZIP(), []int{7}
}

func (x *ZfFile) GetNombre() string {
	if x != nil {
		return x.Nombre
	}
	return ""
}

func (x *ZfFile) GetContenido() string {
	if x != nil {
		return x.Contenido
	}
	return ""
}

func (x *ZfFile) GetIdDns() int64 {
	if x != nil {
		return x.IdDns
	}
	return 0
}

// Las ips hacia las que el servidor debe propagar los cambios
type TargetIps struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IdDns int64  `protobuf:"varint,1,opt,name=idDns,proto3" json:"idDns,omitempty"`
	Ip1   string `protobuf:"bytes,2,opt,name=ip1,proto3" json:"ip1,omitempty"`
	Ip2   string `protobuf:"bytes,3,opt,name=ip2,proto3" json:"ip2,omitempty"`
}

func (x *TargetIps) Reset() {
	*x = TargetIps{}
	if protoimpl.UnsafeEnabled {
		mi := &file_dns_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TargetIps) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TargetIps) ProtoMessage() {}

func (x *TargetIps) ProtoReflect() protoreflect.Message {
	mi := &file_dns_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TargetIps.ProtoReflect.Descriptor instead.
func (*TargetIps) Descriptor() ([]byte, []int) {
	return file_dns_service_proto_rawDescGZIP(), []int{8}
}

func (x *TargetIps) GetIdDns() int64 {
	if x != nil {
		return x.IdDns
	}
	return 0
}

func (x *TargetIps) GetIp1() string {
	if x != nil {
		return x.Ip1
	}
	return ""
}

func (x *TargetIps) GetIp2() string {
	if x != nil {
		return x.Ip2
	}
	return ""
}

var File_dns_service_proto protoreflect.FileDescriptor

var file_dns_service_proto_rawDesc = []byte{
	0x0a, 0x11, 0x64, 0x6e, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x64, 0x6e, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x22, 0x1d, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x62,
	0x6f, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22,
	0x5b, 0x0a, 0x07, 0x4e, 0x65, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x64, 0x44, 0x6e, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x69, 0x64, 0x44, 0x6e, 0x73, 0x22, 0x76, 0x0a, 0x0a,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6f, 0x70, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6f, 0x70, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x64, 0x44, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x69,
	0x64, 0x44, 0x6e, 0x73, 0x22, 0x4e, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x64, 0x44, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x69,
	0x64, 0x44, 0x6e, 0x73, 0x22, 0x38, 0x0a, 0x0c, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x01, 0x79,
	0x12, 0x0c, 0x0a, 0x01, 0x7a, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x01, 0x7a, 0x22, 0x56,
	0x0a, 0x0f, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x2f, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x64, 0x6e, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x05, 0x63, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x33, 0x0a, 0x05, 0x49, 0x64, 0x44, 0x6e, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x69, 0x64, 0x44, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x69, 0x64, 0x44, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x70, 0x44, 0x6e, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x70, 0x44, 0x6e, 0x73, 0x22, 0x54, 0x0a, 0x06, 0x5a,
	0x66, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x6d, 0x62, 0x72, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x6d, 0x62, 0x72, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x69, 0x64, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x69, 0x64, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x69,
	0x64, 0x44, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x69, 0x64, 0x44, 0x6e,
	0x73, 0x22, 0x45, 0x0a, 0x09, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x70, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x69, 0x64, 0x44, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x69,
	0x64, 0x44, 0x6e, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x70, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x69, 0x70, 0x31, 0x12, 0x10, 0x0a, 0x03, 0x69, 0x70, 0x32, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x69, 0x70, 0x32, 0x32, 0x8a, 0x05, 0x0a, 0x0a, 0x44, 0x6e, 0x73,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x53, 0x61, 0x79, 0x48, 0x65,
	0x6c, 0x6c, 0x6f, 0x12, 0x14, 0x2e, 0x64, 0x6e, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x14, 0x2e, 0x64, 0x6e, 0x73, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x00, 0x12, 0x42, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x2e, 0x64, 0x6e, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4e, 0x65,
	0x77, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x1c, 0x2e, 0x64, 0x6e, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x17, 0x2e, 0x64, 0x6e, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x1c, 0x2e, 0x64, 0x6e, 0x73, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x12, 0x17, 0x2e, 0x64, 0x6e, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x1c, 0x2e, 0x64, 0x6e,
	0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x07, 0x47,
	0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x2e, 0x64, 0x6e, 0x73, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x4e, 0x65, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x1c, 0x2e, 0x64,
	0x6e, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x08,
	0x47, 0x65, 0x74, 0x43, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x14, 0x2e, 0x64, 0x6e, 0x73, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x19,
	0x2e, 0x64, 0x6e, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x43, 0x6c, 0x6f,
	0x63, 0x6b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x0f, 0x50,
	0x72, 0x6f, 0x70, 0x61, 0x67, 0x61, 0x72, 0x43, 0x61, 0x6d, 0x62, 0x69, 0x6f, 0x73, 0x12, 0x12,
	0x2e, 0x64, 0x6e, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x49, 0x64, 0x44,
	0x6e, 0x73, 0x1a, 0x14, 0x2e, 0x64, 0x6e, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x0f, 0x53, 0x6f,
	0x62, 0x72, 0x65, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x69, 0x72, 0x5a, 0x66, 0x12, 0x13, 0x2e,
	0x64, 0x6e, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x5a, 0x66, 0x46, 0x69,
	0x6c, 0x65, 0x1a, 0x14, 0x2e, 0x64, 0x6e, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x0b, 0x50, 0x72,
	0x6f, 0x70, 0x61, 0x67, 0x61, 0x72, 0x5a, 0x66, 0x73, 0x12, 0x16, 0x2e, 0x64, 0x6e, 0x73, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x70,
	0x73, 0x1a, 0x14, 0x2e, 0x64, 0x6e, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x0c, 0x45, 0x6c, 0x69,
	0x6d, 0x69, 0x6e, 0x61, 0x72, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x12, 0x2e, 0x64, 0x6e, 0x73, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x49, 0x64, 0x44, 0x6e, 0x73, 0x1a, 0x14, 0x2e,
	0x64, 0x6e, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_dns_service_proto_rawDescOnce sync.Once
	file_dns_service_proto_rawDescData = file_dns_service_proto_rawDesc
)

func file_dns_service_proto_rawDescGZIP() []byte {
	file_dns_service_proto_rawDescOnce.Do(func() {
		file_dns_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_dns_service_proto_rawDescData)
	})
	return file_dns_service_proto_rawDescData
}

var file_dns_service_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_dns_service_proto_goTypes = []interface{}{
	(*Message)(nil),         // 0: dns_service.Message
	(*NewName)(nil),         // 1: dns_service.NewName
	(*UpdateInfo)(nil),      // 2: dns_service.UpdateInfo
	(*DeleteInfo)(nil),      // 3: dns_service.DeleteInfo
	(*ClockMessage)(nil),    // 4: dns_service.ClockMessage
	(*CommandResponse)(nil), // 5: dns_service.CommandResponse
	(*IdDns)(nil),           // 6: dns_service.IdDns
	(*ZfFile)(nil),          // 7: dns_service.ZfFile
	(*TargetIps)(nil),       // 8: dns_service.TargetIps
}
var file_dns_service_proto_depIdxs = []int32{
	4,  // 0: dns_service.CommandResponse.clock:type_name -> dns_service.ClockMessage
	0,  // 1: dns_service.DnsService.SayHello:input_type -> dns_service.Message
	1,  // 2: dns_service.DnsService.CreateName:input_type -> dns_service.NewName
	2,  // 3: dns_service.DnsService.Update:input_type -> dns_service.UpdateInfo
	3,  // 4: dns_service.DnsService.Delete:input_type -> dns_service.DeleteInfo
	1,  // 5: dns_service.DnsService.GetName:input_type -> dns_service.NewName
	0,  // 6: dns_service.DnsService.GetClock:input_type -> dns_service.Message
	6,  // 7: dns_service.DnsService.PropagarCambios:input_type -> dns_service.IdDns
	7,  // 8: dns_service.DnsService.SobreescribirZf:input_type -> dns_service.ZfFile
	8,  // 9: dns_service.DnsService.PropagarZfs:input_type -> dns_service.TargetIps
	6,  // 10: dns_service.DnsService.EliminarLogs:input_type -> dns_service.IdDns
	0,  // 11: dns_service.DnsService.SayHello:output_type -> dns_service.Message
	5,  // 12: dns_service.DnsService.CreateName:output_type -> dns_service.CommandResponse
	5,  // 13: dns_service.DnsService.Update:output_type -> dns_service.CommandResponse
	5,  // 14: dns_service.DnsService.Delete:output_type -> dns_service.CommandResponse
	5,  // 15: dns_service.DnsService.GetName:output_type -> dns_service.CommandResponse
	4,  // 16: dns_service.DnsService.GetClock:output_type -> dns_service.ClockMessage
	0,  // 17: dns_service.DnsService.PropagarCambios:output_type -> dns_service.Message
	0,  // 18: dns_service.DnsService.SobreescribirZf:output_type -> dns_service.Message
	0,  // 19: dns_service.DnsService.PropagarZfs:output_type -> dns_service.Message
	0,  // 20: dns_service.DnsService.EliminarLogs:output_type -> dns_service.Message
	11, // [11:21] is the sub-list for method output_type
	1,  // [1:11] is the sub-list for method input_type
	1,  // [1:1] is the sub-list for extension type_name
	1,  // [1:1] is the sub-list for extension extendee
	0,  // [0:1] is the sub-list for field type_name
}

func init() { file_dns_service_proto_init() }
func file_dns_service_proto_init() {
	if File_dns_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_dns_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dns_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dns_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dns_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dns_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClockMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dns_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dns_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdDns); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dns_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ZfFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_dns_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TargetIps); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_dns_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_dns_service_proto_goTypes,
		DependencyIndexes: file_dns_service_proto_depIdxs,
		MessageInfos:      file_dns_service_proto_msgTypes,
	}.Build()
	File_dns_service_proto = out.File
	file_dns_service_proto_rawDesc = nil
	file_dns_service_proto_goTypes = nil
	file_dns_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// DnsServiceClient is the client API for DnsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DnsServiceClient interface {
	SayHello(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error)
	CreateName(ctx context.Context, in *NewName, opts ...grpc.CallOption) (*CommandResponse, error)
	Update(ctx context.Context, in *UpdateInfo, opts ...grpc.CallOption) (*CommandResponse, error)
	Delete(ctx context.Context, in *DeleteInfo, opts ...grpc.CallOption) (*CommandResponse, error)
	GetName(ctx context.Context, in *NewName, opts ...grpc.CallOption) (*CommandResponse, error)
	GetClock(ctx context.Context, in *Message, opts ...grpc.CallOption) (*ClockMessage, error)
	// Abajo todo lo de la propagacion
	PropagarCambios(ctx context.Context, in *IdDns, opts ...grpc.CallOption) (*Message, error)
	SobreescribirZf(ctx context.Context, in *ZfFile, opts ...grpc.CallOption) (*Message, error)
	PropagarZfs(ctx context.Context, in *TargetIps, opts ...grpc.CallOption) (*Message, error)
	EliminarLogs(ctx context.Context, in *IdDns, opts ...grpc.CallOption) (*Message, error)
}

type dnsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDnsServiceClient(cc grpc.ClientConnInterface) DnsServiceClient {
	return &dnsServiceClient{cc}
}

func (c *dnsServiceClient) SayHello(ctx context.Context, in *Message, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/dns_service.DnsService/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dnsServiceClient) CreateName(ctx context.Context, in *NewName, opts ...grpc.CallOption) (*CommandResponse, error) {
	out := new(CommandResponse)
	err := c.cc.Invoke(ctx, "/dns_service.DnsService/CreateName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dnsServiceClient) Update(ctx context.Context, in *UpdateInfo, opts ...grpc.CallOption) (*CommandResponse, error) {
	out := new(CommandResponse)
	err := c.cc.Invoke(ctx, "/dns_service.DnsService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dnsServiceClient) Delete(ctx context.Context, in *DeleteInfo, opts ...grpc.CallOption) (*CommandResponse, error) {
	out := new(CommandResponse)
	err := c.cc.Invoke(ctx, "/dns_service.DnsService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dnsServiceClient) GetName(ctx context.Context, in *NewName, opts ...grpc.CallOption) (*CommandResponse, error) {
	out := new(CommandResponse)
	err := c.cc.Invoke(ctx, "/dns_service.DnsService/GetName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dnsServiceClient) GetClock(ctx context.Context, in *Message, opts ...grpc.CallOption) (*ClockMessage, error) {
	out := new(ClockMessage)
	err := c.cc.Invoke(ctx, "/dns_service.DnsService/GetClock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dnsServiceClient) PropagarCambios(ctx context.Context, in *IdDns, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/dns_service.DnsService/PropagarCambios", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dnsServiceClient) SobreescribirZf(ctx context.Context, in *ZfFile, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/dns_service.DnsService/SobreescribirZf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dnsServiceClient) PropagarZfs(ctx context.Context, in *TargetIps, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/dns_service.DnsService/PropagarZfs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dnsServiceClient) EliminarLogs(ctx context.Context, in *IdDns, opts ...grpc.CallOption) (*Message, error) {
	out := new(Message)
	err := c.cc.Invoke(ctx, "/dns_service.DnsService/EliminarLogs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DnsServiceServer is the server API for DnsService service.
type DnsServiceServer interface {
	SayHello(context.Context, *Message) (*Message, error)
	CreateName(context.Context, *NewName) (*CommandResponse, error)
	Update(context.Context, *UpdateInfo) (*CommandResponse, error)
	Delete(context.Context, *DeleteInfo) (*CommandResponse, error)
	GetName(context.Context, *NewName) (*CommandResponse, error)
	GetClock(context.Context, *Message) (*ClockMessage, error)
	// Abajo todo lo de la propagacion
	PropagarCambios(context.Context, *IdDns) (*Message, error)
	SobreescribirZf(context.Context, *ZfFile) (*Message, error)
	PropagarZfs(context.Context, *TargetIps) (*Message, error)
	EliminarLogs(context.Context, *IdDns) (*Message, error)
}

// UnimplementedDnsServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDnsServiceServer struct {
}

func (*UnimplementedDnsServiceServer) SayHello(context.Context, *Message) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (*UnimplementedDnsServiceServer) CreateName(context.Context, *NewName) (*CommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateName not implemented")
}
func (*UnimplementedDnsServiceServer) Update(context.Context, *UpdateInfo) (*CommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedDnsServiceServer) Delete(context.Context, *DeleteInfo) (*CommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedDnsServiceServer) GetName(context.Context, *NewName) (*CommandResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetName not implemented")
}
func (*UnimplementedDnsServiceServer) GetClock(context.Context, *Message) (*ClockMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClock not implemented")
}
func (*UnimplementedDnsServiceServer) PropagarCambios(context.Context, *IdDns) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PropagarCambios not implemented")
}
func (*UnimplementedDnsServiceServer) SobreescribirZf(context.Context, *ZfFile) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SobreescribirZf not implemented")
}
func (*UnimplementedDnsServiceServer) PropagarZfs(context.Context, *TargetIps) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PropagarZfs not implemented")
}
func (*UnimplementedDnsServiceServer) EliminarLogs(context.Context, *IdDns) (*Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EliminarLogs not implemented")
}

func RegisterDnsServiceServer(s *grpc.Server, srv DnsServiceServer) {
	s.RegisterService(&_DnsService_serviceDesc, srv)
}

func _DnsService_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DnsServiceServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dns_service.DnsService/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DnsServiceServer).SayHello(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _DnsService_CreateName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DnsServiceServer).CreateName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dns_service.DnsService/CreateName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DnsServiceServer).CreateName(ctx, req.(*NewName))
	}
	return interceptor(ctx, in, info, handler)
}

func _DnsService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DnsServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dns_service.DnsService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DnsServiceServer).Update(ctx, req.(*UpdateInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _DnsService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DnsServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dns_service.DnsService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DnsServiceServer).Delete(ctx, req.(*DeleteInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _DnsService_GetName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DnsServiceServer).GetName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dns_service.DnsService/GetName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DnsServiceServer).GetName(ctx, req.(*NewName))
	}
	return interceptor(ctx, in, info, handler)
}

func _DnsService_GetClock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DnsServiceServer).GetClock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dns_service.DnsService/GetClock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DnsServiceServer).GetClock(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _DnsService_PropagarCambios_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdDns)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DnsServiceServer).PropagarCambios(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dns_service.DnsService/PropagarCambios",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DnsServiceServer).PropagarCambios(ctx, req.(*IdDns))
	}
	return interceptor(ctx, in, info, handler)
}

func _DnsService_SobreescribirZf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ZfFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DnsServiceServer).SobreescribirZf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dns_service.DnsService/SobreescribirZf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DnsServiceServer).SobreescribirZf(ctx, req.(*ZfFile))
	}
	return interceptor(ctx, in, info, handler)
}

func _DnsService_PropagarZfs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TargetIps)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DnsServiceServer).PropagarZfs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dns_service.DnsService/PropagarZfs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DnsServiceServer).PropagarZfs(ctx, req.(*TargetIps))
	}
	return interceptor(ctx, in, info, handler)
}

func _DnsService_EliminarLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdDns)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DnsServiceServer).EliminarLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dns_service.DnsService/EliminarLogs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DnsServiceServer).EliminarLogs(ctx, req.(*IdDns))
	}
	return interceptor(ctx, in, info, handler)
}

var _DnsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dns_service.DnsService",
	HandlerType: (*DnsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _DnsService_SayHello_Handler,
		},
		{
			MethodName: "CreateName",
			Handler:    _DnsService_CreateName_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _DnsService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _DnsService_Delete_Handler,
		},
		{
			MethodName: "GetName",
			Handler:    _DnsService_GetName_Handler,
		},
		{
			MethodName: "GetClock",
			Handler:    _DnsService_GetClock_Handler,
		},
		{
			MethodName: "PropagarCambios",
			Handler:    _DnsService_PropagarCambios_Handler,
		},
		{
			MethodName: "SobreescribirZf",
			Handler:    _DnsService_SobreescribirZf_Handler,
		},
		{
			MethodName: "PropagarZfs",
			Handler:    _DnsService_PropagarZfs_Handler,
		},
		{
			MethodName: "EliminarLogs",
			Handler:    _DnsService_EliminarLogs_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dns_service.proto",
}
